What you'll build
You will build a .NET Framework 4.8 Windows Service that is able to be run under a Group Managed Service Account (gMSA) and connect to GOS from a Windows Server.

What you'll need
About 90 minutes
Visual Studio 2019 (Enterprise 16.x)
Access to a GOS Dev Account. See GOS Onboarding Guide
Access to create a new functional account. See this guide for creating an FID
Access to a 2016 or 2019 Windows Server
Create a new functional account
Complete all the steps on this Confluence page for creating an FID for use with an Oracle database.

Create a database in GOS
If your application is not yet onboarded to GOS, you'll need to first do that here.

Now we can create a database in GOS. This can be done at go/clouddb.

Sign in and click on your application. Select "Create Database" and fill out the form.

Remember the Alias that you give to your new database because we will need it later.
The Database UserName is the name of the Oracle schema - it can be different than the Kerberos username.
The Kerberos Username is the name chosen when creating the FID.
The Kerberos Domain must be set to EXCHAD.JPMCHASE.NET.
For the other fields, you can refer to this documentation to determine what is most suitable for your application.
create new GOS database

After you click "Create", go to the Overview page for your new database. In the left nav bar, click on "Connection Details". Copy your connection string from under the TNS NAMES ENTRIES (READ WRITE) section. You will also need this later.

Create a new gMSA
gMSAs provide a single identity solution for services running on a server farm, or on systems behind Network Load Balancer. By providing a gMSA solution, services can be configured for the new gMSA principal and the password management is handled by Windows.

This Confluence page outlines the steps https://confluence.uk.jpmorgan.com/confluence/display/SOPHIAON/Creation+of+a+gMSA+Account to create a new gMSA.

Create a new .NET app
Open up Visual Studio. Select "Create a new project".

Create new project

Search for Windows Service (.NET Framework) or select it from the suggested templates. We are using C# for this app.

Choose project type

Choose a project name and location. For this primer, we're using GosDotNetConsoleApp for the name and .NET Framework 4.8 for the Framework version.

Choose app name and target framework

Open your Solution Explorer window in Visual Studio. You should have the following:

New app Solution Explorer

In a File Explorer window, add a nuget.config file to your root directory where you created your solution file.

nuget.config in file explorer

Edit the nuget.config file and paste in the following configuration, or follow the Tool Setup guide from Managed Repos. This will allow us to find the required NuGet packages in the next step.

<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <packageRestore>
        <add key="enabled" value="True" />
    </packageRestore>
    <packageSources>
        <add key="Managed Repos Artifactory" value="https://artifacts.jpmchase.net/artifactory/api/nuget/v3/nuget/" />
        <add key="DevX Repo External" value="http://repo-proxy.jpmchase.net/nuget/service/local/nuget/nuget-public-external/" />
        <add key="DevX Repo GAIADOTNET" value="http://repo.jpmchase.net/nuget/service/local/nuget/GAIADOTNET/" />
    </packageSources>
</configuration>
In order for Visual Studio to pick up these new package sources, we will need to close and reopen Visual Studio. Once back inside Visual Studio, right click on your new project and select "Manage NuGet Packages..."

Open package manager

Select DevX Repo External for your package source in the drop down menu on the right side and search for "Oracle" in the box on the left.

Add Oracle package

After the Oracle.ManagedDataAccess NuGet package finishes downloading, it will open up a readme.txt file. This primer covers the all of the required setup outlined in readme.txt file that you'll need.

Open up the App.config file in the root of your project. Take note of the <oracle.manageddataaccess.client> element. This is where most of your configurations will go.

Oracle section of app config

Change your <oracle.manageddataaccess.client> node to match the following.

<oracle.manageddataaccess.client>
  <version number="*">
    <settings>
      <setting name="sqlnet.authentication_services" value="(Kerberos5)" />
      <setting name="sqlnet.kerberos5_conf" value="C:\DotNetGosPrimer\krb5.conf" />
      <setting name="sqlnet.kerberos5_cc_name" value="MSLSA:" />
    </settings>
    <dataSources>
      <dataSource alias="YourDatabaseAlias" descriptor="Your connection string"/>
    </dataSources>
  </version>
</oracle.manageddataaccess.client>
Breakdown of these settings:

sqlnet.authentication_services specifies the type of authentication service to be used. Kerberos5 represents Kerberos authentication. If you omit this setting, it attempts to connect via username and password.
sqlnet.kerberos5_conf specifies the complete path name to the Kerberos configuration file, which contains the realm for the default Key Distribution Center (KDC) and maps realms to KDC hosts.
sqlnet.kerberos5_cc_name specifies the complete path name to the Kerberos credentials cache file. The MSLSA option we are using here specifies the file is on Microsoft Windows, and is running Microsoft KDC.
Update the value of <dataSource> to match your database alias and connection string in GOS.
Note: Oracle recommends configuring net service aliases and connect descriptors in a .NET config file to have the application configuration be self-contained rather than using tnsnames.ora or TNS_ADMIN.

Now we can set up our application to use the 64-bit version of Oracle.ManagedDataAccessIOP.dll:

Right click on the Visual Studio project.
Select Add -> New Folder.
Name the folder x64.
Right click on the newly created x64 folder.
Select Add -> Existing Item.
Browse to packages\Oracle.ManagedDataAccess.<version>\bin\x64 under your project solution directory.
Choose Oracle.ManagedDataAccessIOP.dll.
Click the 'Add' button.
Left click the newly added Oracle.ManagedDataAccessIOP.dll in the x64 folder.
In the properties window, set 'Copy To Output Directory' to 'Copy Always'.
For x86 targeted applications, name the folder x86 and add assemblies from the packages\Oracle.ManagedDataAccess.<version>\bin\x86 folder.

In order to support both x86 and x64 CPU-architecture, we will do steps 1-10 twice for creating both x64 and x86 folders with the necessary assemblies added to them.

Now our Solution Explorer looks like this:

Solution Explorer after new folders

Now we can open up our Service1.cs file in the root of our project and copy in the following:

using Oracle.ManagedDataAccess.Client;
using System;
using System.ServiceProcess;

namespace GosDotNetService
{
    public partial class Service1 : ServiceBase
    {
        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            Logger.WriteToLog("Starting service...");
            Logger.WriteToLog("Starting attempt to connect to the DB...");
            ConnectToGos();
            Logger.WriteToLog("Call to connect to DB completed.");
        }

        protected override void OnStop()
        {
            Logger.WriteToLog("Stopping service...\n");
        }

        public void ConnectToGos()
        {
            try
            {
                OracleConnection oracleConnection = new OracleConnection("User Id=/;Data Source=YourDatabaseAlias;");
                oracleConnection.Open();
                Logger.WriteToLog($"Database connection: {oracleConnection.State}");
            }
            catch (Exception ex)
            {
                Logger.WriteToLog(ex.ToString());
            }
        }
    }
}
Next we will add a simple log class so that we can see details about a successful connection or any potential errors. Right click your on project in the solution explorer, click "Add" -> "Class" and name it Logger. Copy in the following code:

using System;
using System.IO;

namespace GosDotNetService
{
    public static class Logger
    {
        private static readonly string _logFileLocation = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Log.txt");

        public static void WriteToLog(string message)
        {
            File.AppendAllText(_logFileLocation, $"{message} \n");
        }
    }
}
This class will create a text file named Log.txt in the root application folder when we run the service.

Now we are finished adding the minimum-required code for our project!

Add Entity Framework 6 (optional, but recommended)
What is Entity Framework?
Entity Framework is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. The Microsoft documentation for getting started with EF6 can be found here.
To use EF in our app, we first need to add another NuGet reference to Oracle.ManagedDataAccess.EntityFramework.

Oracle EF NuGet package

After this NuGet package installs, our App.config file will look like this:

<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="oracle.manageddataaccess.client"
      type="OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342"/>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework"
      type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      requirePermission="false"/>
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
  </startup>
  <system.data>
    <DbProviderFactories>
      <remove invariant="Oracle.ManagedDataAccess.Client"/>
      <add name="ODP.NET, Managed Driver" invariant="Oracle.ManagedDataAccess.Client" description="Oracle Data Provider for .NET, Managed Driver"
        type="Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342"/>
    </DbProviderFactories>
  </system.data>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <publisherPolicy apply="no"/>
        <assemblyIdentity name="Oracle.ManagedDataAccess" publicKeyToken="89b483f429c47342" culture="neutral"/>
        <bindingRedirect oldVersion="4.121.0.0 - 4.65535.65535.65535" newVersion="4.122.19.1"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <oracle.manageddataaccess.client>
    <version number="*">
      <settings>
        <setting name="sqlnet.authentication_services" value="(Kerberos5)"/>
        <setting name="sqlnet.kerberos5_conf" value="C:\DotNetGosPrimer\krb5.conf"/>
        <setting name="sqlnet.kerberos5_cc_name" value="MSLSA:"/>
      </settings>
      <dataSources>
        <dataSource alias="YourDatabaseAlias" descriptor="Your connection string"/>
      </dataSources>
    </version>
  </oracle.manageddataaccess.client>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="v13.0"/>
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
      <provider invariantName="Oracle.ManagedDataAccess.Client"
        type="Oracle.ManagedDataAccess.EntityFramework.EFOracleProviderServices, Oracle.ManagedDataAccess.EntityFramework, Version=6.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342"/>
    </providers>
  </entityFramework>
  <connectionStrings>
    <add name="OracleDbContext" providerName="Oracle.ManagedDataAccess.Client"
      connectionString="User Id=oracle_user;Password=oracle_user_password;Data Source=oracle"/>
  </connectionStrings>
</configuration>
Update the <connectionStrings> node to match the following:

<connectionStrings>
    <add name="GOSTestDbContext" providerName="Oracle.ManagedDataAccess.Client" connectionString="User Id=/;Data Source=YourDatabaseAlias"/>
</connectionStrings>
The DbContext is the primary class your application interacts with to talk to the database. Choose a name for yours that is related to the purpose of your database (ie. DocumentTrackingContext, CustomerContext, ProductContext, etc.) More info on the purpose of the DbContext can be found here.
In the connectionString setting, User Id=/ tells EF to use Kerberos authentication instead of username and password.
Data Source should match your GOS alias.
Now we need to create the DbContext that we just named. Right click on your project in the Solution Explorer and select Add -> Class... Give this new class the DbContext name you just defined in your App.config file. Paste in the following code, updating your namespace, class name, and context name to match your own:

using System.Data.Entity;

namespace GosDotNetService
{
    internal class GOSTestDbContext : DbContext
    {
        public GOSTestDbContext() : base("GOSTestDbContext")
        {

        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    }
}
The string containing GOSTestDbContext that is being passed down into the base class constructor tells EF/Oracle to look for the connection details with that name in the App.config file.
We're going to add one more new class with the name Repository. Follow the same steps for creating a new class and then paste in the following code:

namespace GosDotNetService
{
    public class Repository
    {
        public void Connect()
        {
            using (var context = new GOSTestDbContext())
            {
                context.Database.Connection.Open();
                Logger.WriteToLog($"Database connection is {context.Database.Connection.State}.");
            }
        }
    }
}
Update the names here to match the names you've chosen in previous steps.
Finally, we are going to update Service1.cs to call into our new repository.

using System;
using System.ServiceProcess;

namespace GosDotNetService
{
    public partial class Service1 : ServiceBase
    {
        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            Logger.WriteToLog("Starting service...");
            Logger.WriteToLog("Starting attempt to connect to the DB...");
            ConnectToGos();
            Logger.WriteToLog("Call to connect to DB completed.");
        }

        protected override void OnStop()
        {
            Logger.WriteToLog("Stopping service...\n");
        }

        public void ConnectToGos()
        {
            try
            {
                var repository = new Repository();
                repository.Connect();
            }
            catch (Exception ex)
            {
                Logger.WriteToLog(ex.ToString());
            }
        }
    }
}
This covers the basic setup required to use Entity Framework. For instructions on expanding your appllication to include things like entity configurations and database migrations, take a look at this Microsoft guide.

Download and install MIT Kerberos for Windows on your server
The installer is available in AIM under quad:/3rd/mit-kerberos/4.1-windows. This documentation walks you through how to do a one-time download from an AIM repo.

If you are wanting to add MIT Kerberos for Windows to a blueprint, it can be pulled from SCCM with a blueprint configured like this:

"blueprintDefinition":{
  "modules":[{
    "id":84729
    "name":"Windows_Software_Install_Using_SCCM"
    "version":"2.0"
    "platform":"Windows"
    "category":"Application"
    "description":"This Module is to install software\applications on Windows servers using SCCM_OnDemand"
    "orderNo":1
    "attributeScope":"global"
    "referenceId":"Windows_Software_Install_Using_SCCM_OnDemand"
    "provider":"SCCM"
    "state":"active"
    "type":"SOFTWARE"
    "moduleDefinitionId":1457
    "attributes":{
      "ActionType":"install"
      "Name":"MassachusettsInstituteofTechnology-MITKerberosforWindows64-bit410-4-1-0"
    }
  }]
}
Deploy or copy your application to your server.
For simplicity, we will create a shared folder on the server to copy files into.

Create new folder on your server. In this example, we are creating a folder named DotNetGosPrimer under the C: drive. Right click on this new folder and select "Properties". Click on the "Sharing" tab, then click "Share...".

Share new server folder

First type your SID into the box, then click "Add". Once your name pops up below, click the drop down under the Permission Level column and give yourself Read/Write access. Click "Share" at the bottom when you are done.

Share folder permissions

Now from your LVDI, navigate to this new folder in File Explorer. After building the application within Visual Studio, copy the contents of your bin\Debug folder to the server.

Copy app to server

Download and copy a krb5.conf file to your server
This file contains the Kerberos configuration information for the firm, including locations of Key Distribution Centers (KDC), realms, and admin servers.

It can be downloaded directly from here - krb5.conf. The file appears at the bottom of your web page.

Copy this file into the DotNetGosPrimer folder.

Notes:

- If you decide to move this file elsewhere, you will need to update your App.config's sqlnet.kerberos5_conf setting to point to the new location.

- More information about the purpose and contents of a krb5.conf file can be found here.


Create a new Windows Service
Open PowerShell as an administrator and run the following command:

New-Service -Name "GosDotNetService" -BinaryPathName "C:\DotNetGosPrimer\GosDotNetService.exe"
You should see the following output:

PowerShell create service

Now we need to configure the new service to run under our gMSA. Open the Services desktop app and find the newly created GosDotNetService in the list of local services. Right click it and select "Properties".

Service properties

Click the "Log On" tab, the "This account:" radio button, and the "Browse..." button.

Service log on properties

On the Select User box, click the "Object Types..." button and unselect the "Users" checkbox and click "OK". Enter your gMSA into the text box and click the "Check Names" button.

Input gMSA into service logon

Note: You'll need to change DOMAIN to match the domain you created your gMSA under, ie. NAEAST, ASIAPAC, EXCHAD, SophiaAD, etc. Also be sure to include the $ at the end of the ID.

If the account is found, the text should change to just the ID and the $ (ie. A123456$). Click "OK".

Remove the masked text from the password boxes, then select "Apply" and "OK".

Remove password text from gmsa

Run the service
In the Services app, right click on the GosDotNetService app and select "Start".

Start service

Starting the service will open up a connection to your database and create a local log file. After a few seconds, right click the GosDotNetService again and select "Stop".

Navigate to C:\DotNetGosPrimer\ (or whatever folder you chose that contains the service's executable file). You should see a file named log.txt. Open the file. You should see the following contents:

Log output

We now have a .NET Windows Service that can connect to GOS!

For instructions on expanding your application to include things like entity configurations and database migrations, take a look at this Microsoft guide.

FAQ
Can I use .NET Core instead of .NET Framework?

No. Connecting to Oracle using Kerberos in .NET Core is not yet supported by Oracle due to limitations in .NET Core. This issue is being tracked on this GitHub page.
Can I use Java instead of C#?

Yes, here is the documentation that shows how to connect using the JDBC Thin Client or OCI Thick Client.
How does this compare to using another database like SQL Server?

Microsoft SQL Server requires a lot less setup compared to Oracle, largely because it has no depedency on MIT Kerberos for Windows. Talk to your design authority about the choice of SQL Server vs. Oracle for Windows applications.
If I am creating a database before writing my code with Entity Framework, does that mean I'm using a database-first approach?

No. You can still target a new, empty database and have your code-first Entity Framework application create your database tables.
Summary
Congratulations! You have built an application to connect to GOS.

We hope you have enjoyed completing this primer. If you would like to contribute a primer to Tech Primers library, please contact Tech_Primers@restricted.chase.com.

References/Resources
You can find additional resources and references here:

Confluence page documenting common errors and their resolutions
Differences between the ODP.NET Managed and Unmanaged Drivers
Connect to GOS using a FID and SQL Developer
Kerberos FAQ
